#!/bin/bash

# check the environment (Linux, Mac) to find base path where DRC is installed
case "$(uname -s)" in

   Darwin)
     CONFIG_DIR="/usr/local/share/drc/config/44.1 kHz"
     ;;

   Linux)
     CONFIG_DIR=/usr/share/drc/config
     ;;

   *)
     exit 1
     ;;
esac

WAVE_EXT=wav
RAW_EXT=pcm
DRC_EXT=drc
DEFAULT_NAME_MIC_COMPENSATION_FILE=mic_compensation_file
DEFAULT_NAME_TARGET_CURVE_FILE=target_curve_file
DRC_CONFIGURATION_FREQUENCY_FOLDER="44.1 kHz"
DRC_CONFIGURATION_FILE_PREFIX=erb
DRC_CONFIGURATION_FILE_FREQUENCY=44.1
IMPULSE_RESPONSE_RAW_FILE_SUFFIX=impulse_response_raw
MIC_COMPENSATED_IMPULSE_RESPONSE_SUFFIX=mic_compensated_impulse_response
MINIMUM_PHASE_SUFFIX=minimum_phase
TEST_CONVOLUTION_SUFFIX=test_convolution
OUT_DIR=out
WAV_16_BIT_OUT_DIR=$OUT_DIR/wav

IMPULSE_RESPONSE_BIT_DEPTH=32
OPERATING_FREQUENCY=44100
A_FACTOR_EP_LOWER_WINDOW=24
START_FREQ=20
END_FREQ=20000
PEAK_LIMITING_MAX_GAIN=2

function print_help {
 echo >&2
 echo "drc is intended to be used with 44100 Hz files but other frequency configuration files are provided but they aren't tested" >&2
 echo >&2
 echo "when exporting impulse response please be sure it is a signed integer 32 bit wav to achieve the best result" >&2
 echo >&2
 echo "USAGE drcwrapper -b [...] -f [...] -c [...] -m [...] -t [...] -s [...] -e [...] -g [...] -p [...] -l [...] -u [...] IMPULSE" >&2
 echo >&2
 echo "-b	impulse response bit depth. Default is 32" >&2
 echo "-f	operating frequency. It can be 44100, 48000, 88200 or 96000. Default is 44100" >&2
 echo "-c	DRC configuration preset (minimal, soft, normal, strong, extreme, insane, erb)" >&2
 echo "-m	mic compensation file" >&2
 echo "-t	target curve" >&2
 echo "-s	lower end frequency that your speaker can reproduce" >&2
 echo "-e	higher end frequency that your speaker can reproduce" >&2
 echo "-g	Maximum gain allowed in the correction filter. Peaks in the correction filter amplitude response greater than this value will be compressed to PLMaxGain. Typical values are between 1.2 and 4. A typical value is 2.0, i.e. 6 dB." >&2
 echo "-p	window exponent. Increasing it gives higher correction in the midrange. Typical values are between 0.7 and 1.2" >&2
 echo "-l	lower correction window in milliseconds" >&2
 echo "-u	upper correction window in milliseconds" >&2
 echo >&2
}

function evaluate_help {
 if [ $1 = "-h" -o $1 = "--help" ]; then
  print_help;
  exit 1
 fi
}


# $1 is the filename to create
# $2 is sampling rate
# first row in the file must be 0
# last row in the file must be sampling rate / 2
function print_flat_file {
  touch $1
  echo -e "0 -30\n$(($2 / 2)) -30" >> $1
}


function set_operating_frequency {
  case $1 in
   "44100")
       DRC_CONFIGURATION_FREQUENCY_FOLDER="44.1 kHz"
       DRC_CONFIGURATION_FILE_FREQUENCY=44.1
       OPERATING_FREQUENCY=44100
       ;;
   "48000")
       DRC_CONFIGURATION_FREQUENCY_FOLDER="48.0 kHz"
       DRC_CONFIGURATION_FILE_FREQUENCY=48.0
       OPERATING_FREQUENCY=48000
       ;;
   "88200")
       DRC_CONFIGURATION_FREQUENCY_FOLDER="88.2 kHz"
       DRC_CONFIGURATION_FILE_FREQUENCY=88.2
       OPERATING_FREQUENCY=88200
       ;;
   "96000")
       DRC_CONFIGURATION_FREQUENCY_FOLDER="96.0 kHz"
       DRC_CONFIGURATION_FILE_FREQUENCY=96.0
       OPERATING_FREQUENCY=96000
       ;;
  esac
}


# calculate using bc
function calculate_bc {
  echo $(echo "$1" | bc)
}


function calculate_start_freq {
  echo $(calculate_bc "$1 * 2")
}


function calculate_end_freq {
  echo $(calculate_bc "$1 / 2")
}


# calculate window taps from milliseconds
function calculate_window_taps {
  echo $(calculate_bc "$1 * $OPERATING_FREQUENCY / 500")
}


function calculate_ep_lower_window_taps {
  echo $(calculate_bc "$1 / $A_FACTOR_EP_LOWER_WINDOW")
}


function calculate_is_pe_lower_window_taps {
  echo $(calculate_bc "$1 / 2")
}


function calculate_is_pe_upper_window_taps {
  echo $(calculate_bc "$1 * 75 / 100")
}


NUM_ARGS=$#

case $NUM_ARGS in
 "0")
     print_help;
     exit 1
     ;;
 "1")
     evaluate_help $1;
     ;;
esac


# some parameters are set so it is possible to create work directory
mkdir $OUT_DIR


while getopts ":b:f:c:m:t:s:e:g:p:l:u:" OPTIONS; do
  case $OPTIONS in
    b)
      IMPULSE_RESPONSE_BIT_DEPTH=$OPTARG
      ;;
    f)
      set_operating_frequency $OPTARG
      ;;
    c)
      DRC_CONFIGURATION_FILE_PREFIX=$OPTARG
      ;;
    m)
      MIC_COMP_FILE=$OPTARG
      ;;
    t)
      TARGET_CURVE=$OPTARG
      ;;
    s)
      # Start frequency where the reference RMS level used for peak limiting is computed. Default value set to 100 Hz.
      # This value should be set typically to something like an octave above the minimum reproducible frequency of your speakers.
      START_FREQ=$(calculate_start_freq $OPTARG)
      ;;
    e)
      # End frequency where the reference RMS level used for peak limiting is computed. Default value set to 10000 Hz.
      # This value should be set typically to something like an octave below the maximum reproducible frequency of your speakers.
      END_FREQ=$(calculate_end_freq $OPTARG)
      ;;
    g)
      PEAK_LIMITING_MAX_GAIN=$OPTARG
      ;;
    p)
      WINDOW_EXPONENT=$OPTARG
      ;;
    l)
      LOWER_WINDOW_TAPS=$(calculate_window_taps $OPTARG)
      EP_LOWER_WINDOW_TAPS=$(calculate_ep_lower_window_taps $LOWER_WINDOW_TAPS)
      IS_PE_LOWER_WINDOW_TAPS=$(calculate_is_pe_lower_window_taps $EP_LOWER_WINDOW_TAPS)
      IS_PE_UPPER_WINDOW_TAPS=$(calculate_is_pe_upper_window_taps $IS_PE_LOWER_WINDOW_TAPS)
      ;;
    u)
      UPPER_WINDOW_TAPS=$(calculate_window_taps $OPTARG)
      ;;
    :)
      echo "Error: option ${OPTARG} requires an argument"
      echo
      print_help;
      exit 1
      ;;
    ?)
      echo "Invalid option: ${OPTARG}"
      echo
      print_help;
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))


# handle cases where a microphone correction is not available or a target curve is not set
if [ -z "$MIC_COMP_FILE" ]; then
  print_flat_file $DEFAULT_NAME_MIC_COMPENSATION_FILE $OPERATING_FREQUENCY
  MIC_COMP_FILE=$DEFAULT_NAME_MIC_COMPENSATION_FILE
fi

if [ -z "$TARGET_CURVE" ]; then
  print_flat_file $DEFAULT_NAME_TARGET_CURVE_FILE $OPERATING_FREQUENCY
  TARGET_CURVE=$DEFAULT_NAME_TARGET_CURVE_FILE
fi


INPUT_FILE=$1
FILENAME=$(basename $INPUT_FILE | sed 's/\.[^.]*$//')

IMPULSE_RESPONSE_RAW_FILE="${FILENAME}_${IMPULSE_RESPONSE_RAW_FILE_SUFFIX}.${RAW_EXT}"
MIC_COMPENSATED_IMPULSE_RESPONSE_FILE="${FILENAME}_${MIC_COMPENSATED_IMPULSE_RESPONSE_SUFFIX}.${RAW_EXT}"
DRC_OUTPUT_FILE="${FILENAME}.${RAW_EXT}"
DRC_OUTPUT_MINIMUM_PHASE_FILE="${FILENAME}_${MINIMUM_PHASE_SUFFIX}.${RAW_EXT}"
DRC_OUTPUT_TEST_CONVOLUTION_FILE="${FILENAME}_${TEST_CONVOLUTION_SUFFIX}.${RAW_EXT}"
DRC_CONFIGURATION_FILE="${CONFIG_DIR}/${DRC_CONFIGURATION_FREQUENCY_FOLDER}/${DRC_CONFIGURATION_FILE_PREFIX}-${DRC_CONFIGURATION_FILE_FREQUENCY}.${DRC_EXT}"


# converting impulse response from signed integer wave (default REW output format) to raw pcm floating point 32 bit (DRC capable)
sox -t wav -e signed-integer -b $IMPULSE_RESPONSE_BIT_DEPTH -r $OPERATING_FREQUENCY -c 1 $INPUT_FILE -t raw -e floating-point -b 32 -r $OPERATING_FREQUENCY -c 1 $OUT_DIR/$IMPULSE_RESPONSE_RAW_FILE

DRC="drc --BCInFile=$OUT_DIR/$IMPULSE_RESPONSE_RAW_FILE \
--MCFilterType=M \
--MCPointsFile=$MIC_COMP_FILE \
--MCOutFile=$OUT_DIR/$MIC_COMPENSATED_IMPULSE_RESPONSE_FILE \
--MPWindowExponent=$WINDOW_EXPONENT \
--EPWindowExponent=$WINDOW_EXPONENT \
--RTWindowExponent=$WINDOW_EXPONENT \
--MPLowerWindow=$LOWER_WINDOW_TAPS \
--MPUpperWindow=$UPPER_WINDOW_TAPS \
--EPLowerWindow=$EP_LOWER_WINDOW_TAPS \
--EPUpperWindow=$UPPER_WINDOW_TAPS \
--RTLowerWindow=$LOWER_WINDOW_TAPS \
--RTUpperWindow=$UPPER_WINDOW_TAPS \
--ISPETType=f \
--ISPELowerWindow=$IS_PE_LOWER_WINDOW_TAPS \
--ISPEUpperWindow=$IS_PE_UPPER_WINDOW_TAPS \
--PLStartFreq=$START_FREQ \
--PLEndFreq=$END_FREQ \
--PLMaxGain=$PEAK_LIMITING_MAX_GAIN \
--PSPointsFile=$TARGET_CURVE \
--PSOutFile=$OUT_DIR/$DRC_OUTPUT_FILE \
--MSOutFile=$OUT_DIR/$DRC_OUTPUT_MINIMUM_PHASE_FILE \
--TCOutFile=$OUT_DIR/$DRC_OUTPUT_TEST_CONVOLUTION_FILE \
\"$DRC_CONFIGURATION_FILE\""

echo "executing drc..."
echo
echo $DRC
echo
eval $DRC

# check if drc command exited with 0 status
if [ $? -eq 0 ]
then
	mkdir $WAV_16_BIT_OUT_DIR

	DRC_OUTPUT_FILENAMES_ARRAY=($MIC_COMPENSATED_IMPULSE_RESPONSE_FILE $DRC_OUTPUT_FILE $DRC_OUTPUT_MINIMUM_PHASE_FILE $DRC_OUTPUT_TEST_CONVOLUTION_FILE)

	for FILENAME in "${DRC_OUTPUT_FILENAMES_ARRAY[@]}"
	do
		WAV_FILENAME=$(echo $FILENAME | sed "s/$RAW_EXT/$WAVE_EXT/")

		# convert all drc output files into 16 bit wav
		# REW better manages this kind of format
		sox -t raw -e floating-point -b 32 -r $OPERATING_FREQUENCY -c 1 $OUT_DIR/$FILENAME -t wav -e signed-integer -b 16 -r $OPERATING_FREQUENCY -c 1 $WAV_16_BIT_OUT_DIR/$WAV_FILENAME
	done
fi

echo
echo "cleaning..."
rm $OUT_DIR/$IMPULSE_RESPONSE_RAW_FILE
